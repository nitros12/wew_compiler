#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from grako.buffering import Buffer
from grako.parsing import Parser, graken
from grako.util import RE_FLAGS, generic_main, re  # noqa

KEYWORDS = {}


class WewBuffer(Buffer):

    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(WewBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class WewParser(Parser):

    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=WewBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(WewParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _start_(self):

        def block0():
            self._function_decl_()
        self._positive_closure(block0)

    @graken()
    def _types_(self):
        self._token('int')

    @graken()
    def _declare_types_(self):
        with self._choice():
            with self._option():

                def block0():
                    self._token('*')
                    self.add_last_node_to_name('@')
                self._positive_closure(block0)
                self._types_()
            with self._option():
                self._types_()
                self._token('[')
                self._integer_()
                self._token(']')
            self._error('no available options')

    @graken()
    def _instance_types_(self):
        self._types_()

        def block0():
            self._token('*')
        self._closure(block0)

    @graken()
    def _typed_variable_(self):
        self._instance_types_()
        self._var_name_()

    @graken()
    def _declaration_(self):
        self._declare_types_()
        self._var_name_()

    @graken()
    def _function_decl_(self):
        self._instance_types_()
        self._var_name_()
        self._token('(')
        self._typed_variable_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._typed_variable_()
            self.add_last_node_to_name('@')
        self._closure(block1)
        self._token(')')
        self._scope_()

    @graken()
    def _statement_(self):
        with self._choice():
            with self._option():
                self._if_statement_()
            with self._option():
                self._loop_statement_()
            with self._option():
                self._scope_()
            with self._option():
                self._assignment_()
            with self._option():
                self._function_call_stmt_()
            with self._option():
                self._return_stmt_()
            self._error('no available options')

    @graken()
    def _return_stmt_(self):
        self._token('return')
        self._expression_()
        self._token(';')

    @graken()
    def _if_statement_(self):
        with self._choice():
            with self._option():
                self._token('if')
                self._token('(')
                self._expression_()
                self._token(')')
                self._statement_()
            with self._option():
                self._token('if')
                self._token('(')
                self._expression_()
                self._token(')')
                self._statement_()
                self._token('else')
                self._statement_()
            self._error('no available options')

    @graken()
    def _loop_statement_(self):
        with self._choice():
            with self._option():
                self._token('while')
                self._token('(')
                self._expression_()
                self._token(')')
                self._statement_()
            with self._option():
                self._token('do')
                self._statement_()
                self._token('while')
                self._token('(')
                self._expression_()
                self._token(')')
                self._token(';')
            self._error('no available options')

    @graken()
    def _scope_(self):
        self._token('{')

        def block0():
            self._statement_()
        self._closure(block0)
        self._token('}')

    @graken()
    def _assignment_(self):

        def block0():
            self._token('*')
        self._closure(block0)
        self._var_name_()
        self._token(':=')
        self._expression_()
        self._token(';')

    @graken()
    def _function_call_(self):
        self._var_name_()
        self._token('(')
        self._expression_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._expression_()
            self.add_last_node_to_name('@')
        self._closure(block1)
        self._token(')')

    @graken()
    def _function_call_stmt_(self):
        self._function_call_()
        self._token(';')

    @graken()
    def _expression_(self):
        with self._choice():
            with self._option():
                self._literal_()
            with self._option():
                self._var_name_()
            with self._option():
                self._function_call_()
            with self._option():
                self._comparison_stmt_()
            with self._option():
                self._postfix_expression_()
            with self._option():
                self._prefix_expression_()
            with self._option():
                self._token('(')
                self._expression_()
                self._token(')')
            self._error('no available options')

    @graken()
    def _comparisons_(self):
        with self._choice():
            with self._option():
                self._token('==')
            with self._option():
                self._token('!=')
            with self._option():
                self._token('>')
            with self._option():
                self._token('<')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('>=')
            self._error('expecting one of: != < <= == > >=')

    @graken()
    def _comparison_stmt_(self):
        self._expression_()
        self._comparisons_()
        self._expression_()

    @graken()
    def _prefix_expression_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._token('--')
                    self._expression_()
                self.name_last_node('decrement')
            with self._option():
                with self._group():
                    self._token('++')
                    self._expression_()
                self.name_last_node('increment')
            self._error('no available options')
        self.ast._define(
            ['decrement', 'increment'],
            []
        )

    @graken()
    def _postfix_expression_(self):
        with self._choice():
            with self._option():
                with self._group():
                    self._expression_()
                    self._token('[')
                    self._expression_()
                    self._token(']')
                self.name_last_node('list_index')
            with self._option():
                with self._group():
                    self._expression_()
                    self._token('++')
                self.name_last_node('increment')
            with self._option():
                with self._group():
                    self._expression_()
                    self._token('--')
                self.name_last_node('decrement')
            self._error('no available options')
        self.ast._define(
            ['decrement', 'increment', 'list_index'],
            []
        )

    @graken()
    def _integer_(self):
        self._pattern(r'\d+')

    @graken()
    def _string_(self):
        self._pattern(r'".+"')

    @graken()
    def _literal_(self):
        with self._choice():
            with self._option():
                self._integer_()
            with self._option():
                self._string_()
            self._error('no available options')

    @graken()
    def _var_name_(self):
        self._pattern(r'\w+')


class WewSemantics(object):

    def start(self, ast):
        return ast

    def types(self, ast):
        return ast

    def declare_types(self, ast):
        return ast

    def instance_types(self, ast):
        return ast

    def typed_variable(self, ast):
        return ast

    def declaration(self, ast):
        return ast

    def function_decl(self, ast):
        return ast

    def statement(self, ast):
        return ast

    def return_stmt(self, ast):
        return ast

    def if_statement(self, ast):
        return ast

    def loop_statement(self, ast):
        return ast

    def scope(self, ast):
        return ast

    def assignment(self, ast):
        return ast

    def function_call(self, ast):
        return ast

    def function_call_stmt(self, ast):
        return ast

    def expression(self, ast):
        return ast

    def comparisons(self, ast):
        return ast

    def comparison_stmt(self, ast):
        return ast

    def prefix_expression(self, ast):
        return ast

    def postfix_expression(self, ast):
        return ast

    def integer(self, ast):
        return ast

    def string(self, ast):
        return ast

    def literal(self, ast):
        return ast

    def var_name(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = WewParser()
    return parser.parse(text, startrule, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from grako.util import asjson

    ast = generic_main(main, WewParser, name='Wew')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()

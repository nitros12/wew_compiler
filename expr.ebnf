@@grammar::test
@@parseinfo::False
start = expression $ ;

expression = assign_expression ;


assign_expression
  =
  | ':='>{lor_expression}+
  | lor_expression
  ;

lor_expression
  =
  | '||'>{land_expression}+
  | land_expression
  ;

land_expression
  =
  | '&&'>{or_expression}+
  | or_expression
  ;

or_expression
  =
  | '|'>{xor_expression}+
  | xor_expression
  ;

xor_expression
  =
  | '^'>{and_expression}+
  | and_expression
  ;

and_expression
  =
  | '&'>{equality_expression}+
  | equality_expression
  ;

equality_expression
  =
  | ('==' | '!=')>{relative_expression}+
  | relative_expression
  ;

relative_expression
  =
  | ('>' | '<' | '>=' | '<=')>{shift_expression}+
  | shift_expression
  ;

shift_expression
  =
  | ('<<' | '>>')>{add_expression}+
  | add_expression
  ;

add_expression
  =
  | ('+' | '-')>{mult_expression}+
  | mult_expression
  ;

mult_expression
  =
  | ('/' | '*')>{unary_expression}+
  | unary_expression
  ;

unary_expression
  =
  | ('*' | '-' | '+' | '~' | '!' | '--' | '++') unary_expression
  | postfix_expression
  ;

postfix_expression
  =
  | postfix_expression '[' expression ']'
  | postfix_expression '++'
  | postfix_expression '--'
  | function_expression
  ;

function_expression
  =
  | function_expression '(' ','.{expression} ')'
  | primary_expression
  ;

primary_expression
  =
  | identifier
  | literal
  | '(' ~ @:expression ')'
  ;

integer = /\d+/ ;
string = /".+"/ ;
char = /'.'/ ;

literal
  =
  | integer
  | string
  | char
  ;

identifier = /[A-Za-z]\w+/ ;

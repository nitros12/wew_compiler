@@grammar::Wew

@@comments::/{~(\n|.)*~}/
@@eol_comments::/\/\/.*?$/

@@parseinfo::False

start = {function_decl}+ $ ;

types = 'int' ;

pointer = {@+:'*'}+ ;

instance_types
  =
  | types pointer
  | types
  ;

typed_variable
  =
  type:instance_types name:identifier
  ;

declaration
  =
  | type:types pt:pointer name:identifier ';' ref:`pointer`
  | type:types name:identifier '[' pt:integer ']' ';' ref:`list`
  | type:types name:identifier
  ;

function_decl
  =
  type:instance_types name:identifier '(' params:','.{typed_variable} ')' stat:scope
  ;

scope
  =
  '{' {@+:statement} '}'
  ;

statement
  =
  | expression_stmt
  | if_statement
  | loop_statement
  | return_stmt
  | declaration
  | scope
  ;

expression_stmt
  =
  expression ';'
  ;

return_stmt
  =
  'return' expr:expression ';'
  ;

if_statement
  =
  'if' ~ '(' expr:expression ')' stat:statement ['else' else:statement]
  ;

loop_statement
  =
  | type:'while' ~ '(' expr:expression ')' stat:statement
  | type:'do' ~ stat:statement 'while' '(' expr:expression ')' ';'
  ;

expression
  =
  | assign
  | logical
  ;

assign
  =
  left:logical op:":=" right:expression
  ;


logical
  =
  | bitwise
  | boolean
  | comparison
  ;

bitwise
  =
  left:comparison op:('|' | '^' | '&') right:logical
  ;

boolean
  =
  left:comparison op:('||' | '&&') right:logical
  ;


comparison
  =
  | equality
  | relation
  | shift
  ;


equality
  =
  left:shift op:('!=' | '==') right:comparison
  ;

relation
  =
  left:shift op:(">=" | '<=' | '>' | '<') right:comparison
  ;


shift
  =
  | bitshift
  | bin_expr
  ;

bitshift
  =
  left:bin_expr op:('<<' | '>>') right:shift
  ;


bin_expr
  =
  | addition
  | subtraction
  | term
  ;


addition
  =
  left:term op:'+' ~ right:bin_expr
  ;


subtraction
  =
  left:term op:'-' ~ right:bin_expr
  ;


term
  =
  | multiplication
  | division
  | unary
  ;


multiplication
  =
  left:unary op:'*' ~ right:term
  ;


division
  =
  left:unary op:'/' ~ right:term
  ;

unop
  =
  op:('*' | '-' | '+' | '~' | '!' | '--' | '++') right:unary
  ;

postop
  =
  | left:post_wrap '(' op:','.{expression} ')' type:`f`
  | left:post_wrap '[' ~ op:expression ']' type:`b`
  | left:post_wrap op:('++' | '--') type:`a`
  ;

post_wrap
  =
  | postop
  | factor
  ;

unary
  =
  | post_wrap
  | unop
  ;

factor
  =
  | literal
  | identifier
  | subexpression
  ;


subexpression
  =
  '(' @:expression ')'
  ;


literal
  =
  | integer
  | string
  | char
  ;

integer = /\d+/ ;
string = /".+"/ ;
char = /'.'/ ;
identifier = /[A-Za-z]\w*/ ;


# TODO: finish

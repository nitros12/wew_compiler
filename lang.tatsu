@@grammar::Wew

@@comments::/{~(\n|.)*~}/
@@eol_comments::/\/\/.*?$/

start = {function_decl}+ $ ;

types = 'int' ;

pointer = {@+:'*'}+ ;

instance_types
  =
  | types pointer
  | types
  ;

typed_variable
  =
  type:instance_types name:identifier
  ;

declaration
  =
  | type:types pt:pointer name:identifier ';' ref:`pointer`
  | type:types name:identifier '[' pt:integer ']' ';' ref:`list`
  | type:types name:identifier
  ;

function_decl
  =
  type:instance_types name:identifier '(' params:','.{typed_variable} ')' '{' stat:multi_statements '}'
  ;

multi_statements
  =
  {@+:statement}
  ;

statement
  =
  | expression_stmt
  | if_statement
  | loop_statement
  | return_stmt
  | declaration
  ;

expression_stmt
  =
  expression ';'
  ;

return_stmt
  =
  'return' expr:expression ';'
  ;

if_statement
  =
  'if' ~ '(' expr:expression ')' '{' stat:multi_statements '}' ['else' else:multi_statements]
  ;

loop_statement
  =
  | type:'while' ~ '(' expr:expression ')' '{' stat:multi_statements '}'
  | type:'do' ~ '{' stat:multi_statements '}' 'while' '(' expr:expression ')' ';'
  ;


primary_expression
  =
  | identifier
  | literal
  | '(' expression ')'
  ;

function_call
  =
  name:identifier '(' vars:','.{expression} ')'
  ;

postfix_expression
  =
  | expr:expression '[' val:expression ']' op:`list`
  | expr:expression op:'++'
  | expr:expression op:'--'
  ;

unary_expression
  =
  | op:'--' ~ expr:expression
  | op:'++' ~ expr:expression
  | op:un_op ~ expr:expression
  ;

un_op = '*' | '-' | '+' | '~' | '!' ;

mult_expression
  =
  | left:expression op:'*' ~ right:expression
  | left:expression op:'/' ~ right:expression
  ;

add_expression
  =
  | left:expression op:'+' ~ right:expression
  | left:expression op:'-' ~ right:expression
  ;

shift_expression
  =
  | left:expression op:'<<' ~ right:expression
  | left:expression op:'>>' ~ right:expression
  ;

relative_expression
  =
  | left:expression op:'>' ~ right:expression
  | left:expression op:'<' ~ right:expression
  | left:expression op:'>=' ~ right:expression
  | left:expression op:'<=' ~ right:expression
  ;

equality_expression
  =
  | left:expression op:'==' ~ right:expression
  | left:expression op:'!=' ~ right:expression
  ;

and_expression
  =
  left:expression op:'&' ~ right:expression
  ;

xor_expression
  =
  left:expression op:'^' ~ right:expression
  ;

or_expression
  =
  left:expression op:'|' ~ right:expression
  ;

land_expression
  =
  left:expression op:'&&' ~ right:expression
  ;

lor_expression
  =
  left:expression op:'||' ~ right:expression
  ;

assign_expression
  =
  left:expression op:':=' ~ right:expression
  ;

expression
  =
  | assign_expression
  | lor_expression
  | land_expression
  | or_expression
  | xor_expression
  | and_expression
  | equality_expression
  | relative_expression
  | shift_expression
  | add_expression
  | mult_expression
  | unary_expression
  | postfix_expression
  | function_call
  | primary_expression
  ;

integer = /\d+/ ;
string = /".+"/ ;
char = /'.'/ ;

literal
  =
  | val:integer type:`int`
  | val:string type:`str`
  | val:char type:`char`
  ;

identifier = /[A-Za-z]\w+/ ;

# TODO: finish

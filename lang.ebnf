@@grammar::Wew

start = {function_decl}+ $ ;

types = 'int' ;

pointer = {@+:'*'}+ ;

declare_types
  =
  | typ:types pc:pointer 
  | typ:types '[' len:integer ']'  # list declaration
  | typ:types
  ;

instance_types
  =
  | types pointer
  | types
  ;

typed_variable = instance_types var_name ;

declaration = declare_types var_name ';' ;

function_decl = typ:instance_types name:var_name '(' ~  params:','.{typed_variable}+  ')' exp:scope ;

statement
  =
  | if_statement
  | loop_statement
  | assignment
  | function_call_stmt
  | return_stmt
  | declaration
  | scope
  ;

return_stmt = 'return' expression ';' ;

if_statement
  =
  | 'if' '(' expression ')' statement
  | 'if' '(' expression ')' statement 'else' ~ statement
  ;

loop_statement
  =
  | 'while' ~ '(' expression ')' statement
  | 'do' ~ statement 'while' '(' expression ')' ';'
  ;

scope = '{' {statement}+ '}' ;

assignment = {'*'} var_name ':=' expression ';' ;

function_call = var_name '(' ~ ','.{expression} ')' ;
function_call_stmt = function_call ';' ;

expression
  =
  | function_call
  | comparison_stmt
  | postfix_expression
  | prefix_expression
  | var_name
  | literal
  | '(' expression ')'
  ;

comparisons = '==' | '!=' | '>' | '<' | '<=' | '>=' ;

comparison_stmt = expression comparisons expression ;

prefix_expression
  =
  | '*' ~ expression
  | '--' ~ expression
  | '++' ~ expression
  ;

postfix_expression
  =
  | expression '[' ~ expression ']'
  | expression '++'
  | expression '--'
  ;

integer = /\d+/ ;
string = /".+"/ ;

literal
  =
  | integer
  | string
  ;

var_name = /\w+/ ;

# TODO: add math operators, finish
